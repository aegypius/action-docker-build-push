inputs:
  IMAGE_REPOSITORY:
    required: true
  BUILD_CONTEXT:
    required: true
  BUILD_TARGET:
    description: "Sets the target stage to build"
    required: false
  IMAGE_NAME:
    required: true
  GCR_JSON_KEY:
    required: true
  SECURITY_SCAN:
    type: boolean
    default: true

runs:
  using: "composite"
  steps:
  - name: Checkout code
    uses: actions/checkout@v2
    
  - name: Docker meta
    id: meta
    uses: docker/metadata-action@v3
    with:
      images: ${{ inputs.IMAGE_REPOSITORY }}/${{inputs.IMAGE_NAME}}
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=semver,pattern={{version}}
        type=semver,pattern={{major}}.{{minor}}
        type=sha

  - name: Set up Docker Buildx
    id: buildx
    uses: docker/setup-buildx-action@v1

  - name: Login to GCR
    uses: docker/login-action@v1
    with:
      registry: europe-west1-docker.pkg.dev
      username: _json_key
      password: ${{ inputs.GCR_JSON_KEY }}
    
  - name: Build image localy first
    uses: docker/build-push-action@v2
    id: docker_build
    with:
      context: ${{inputs.BUILD_CONTEXT}}
      tags: local
      pull: true
      target: ${{ inputs.BUILD_TARGET }}
      load: true
      cache-from: type=registry,ref=${{ inputs.IMAGE_REPOSITORY }}/${{inputs.IMAGE_NAME}}:buildcache
      cache-to: type=registry,ref=${{ inputs.IMAGE_REPOSITORY }}/${{inputs.IMAGE_NAME}}:buildcache

  - name: create empty .trivyignore if file is missing
    shell: bash
    run: touch .trivyignore

  - name: Run Trivy vulnerability scanner
    if: ${{ inputs.SECURITY_SCAN }} 
    uses: aquasecurity/trivy-action@master
    with:
      image-ref: local
      format: 'table'
      exit-code: '1'
      ignore-unfixed: true
      vuln-type: 'os,library'
      severity: 'CRITICAL,HIGH'
      trivyignores: .trivyignore

  - name: Build image and push to Docker Hub and GitHub Container Registry
    uses: docker/build-push-action@v2
    id: docker_build_push
    with:
      context: ${{inputs.BUILD_CONTEXT}} 
      tags: ${{ steps.meta.outputs.tags }}
      target: ${{ inputs.BUILD_TARGET }}
      push: true
      pull: true
      cache-from: type=registry,ref=${{ inputs.IMAGE_REPOSITORY }}/${{inputs.IMAGE_NAME}}:buildcache
      cache-to: type=registry,ref=${{ inputs.IMAGE_REPOSITORY }}/${{inputs.IMAGE_NAME}}:buildcache

  - name: Image digest
    shell: bash
    run: echo ${{ steps.docker_build_push.outputs.digest }}
